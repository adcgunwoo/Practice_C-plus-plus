객체 지향 프로그래밍(OOP) 의 4대 원리(또는 원칙, 특성, 특징)
1. 캡슐화 54강 (Encapsulation) (클래스 내 추상화) 
무엇 - 데이터(멤버 변수)와 기능(멤버 메서드)을 하나의 단위로 묶어 놓음
       - 데이터를 보이지 않게 가리고, 데이터에 접근하기 위한 메서드만을 노출(데이터 은닉) 

왜 - 클래스 사용자가 클래스 내부 구조를 이해할 필요가 없고, 사용법만 알면 사용 가능
                  - 또한 사용자가 데이터를 실수로 잘못 바꾸는 것을 방지할 수 있다.

어떻게 - 클래스 안에 멤버 변수, 멤버 메서드 선언 / 접근 제어

언제 - 언제든 사용하고 싶을 때

2. 상속성  75~84강 (Inheritance) 
무엇 - 부모 클래스의 멤버를 재사용해서 자식 클래스에서도 사용할 수 있음
언제 - 부모 클래스에서 할 수 있는 일을 자식 클래스에서 할 수 있다. (Liskov 치환 원칙)
       - 자식 클래스는 부모 클래스의 일종이다 (A is a B) 
왜    - 코드 재사용
어떻게 - : public, protected, private등 상속 받아서 사용

3. 다형성 78강 (Polymorphism)
무엇 - 동적 다형성 : 클래스가 그로부터 파생된 다양한 형태를 지닌다 (Shapes 예제)
         정적 다형성 : 함수 오버로딩, 템플릿
언제 - 자식 클래스의 메서드 구현이 부모 클래스와 다를 때
왜 -자식 클래스에서 하고 싶은 일들이 부모 클래스와 다를 수 있어서
어떻게 - 오버라이딩, 가상 함수를 사용한다. (RTTI, 디형적 클래스)

4. 추상화 80강 (Abstraction) (클래스 간 추상화)
무엇 - 부모 클래스 : 클래스가 구현해야 할 기능만을 명시(순수 가상 함수) (Shapes 예제)
         자식 클래스 : 실제 구현
언제 - [자식 클래스]는 [부모 클래스] 할 수 있어야 한다.
       - "자동차" : 운전대, 페달, 기어변속기 (추상 클래스)
       - 각 부품의 작동 원리는 자동차 종류마다 다름

어떻게 - 추상 클래스를 만든다 (순수 가상 함수를 하나라도 가진다)	 



순수 가상 함수를 하나라도 가지면 ->추상 클래스 (객체를 만들 수 없음)
가상 함수를 하나라도 가지면 ->다형적 클래스(특징으로 RTTI의 사용가능)
